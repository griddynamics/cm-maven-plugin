Usage

  In order to use lifecycle provided in plugin for convenience, just set \<packaging/\> to <configuration> and enable
  plugin extensions in plugin configuration.

---
<project>
  ...
  <packaging>configuration>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>com.griddynamics.maven.plugins</groupId>
        <artifactId>cm-maven-plugin</artifactId>
        <version>1.3.0-SNAPSHOT</version>
        <extensions>true</extensions>
      </plugin>
      ...
    </plugins>
  </build>
  ...
</project>
---

* {Configuration layers}

  There may be as much configuration layers as required by specific project.
  Configuration layers are defined using plugin configuration in the following way:

---
<configuration>
  ...
  <layers>
    <layer>
      <name>application</name>
    </layer>
    <layer>
      <name>environment</name>
    </layer>
    <layer>
      <name>instance</name>
    </layer>
  </layers>
  ...
</configuration>
---

  Such configuration layer structure defines the following project structure:

---
├─application
│ ├─config
│ │ └─...
│ └─environment
│   ├─qa
│   │ └...
│   ├─uat
│   │ └...
│   └─prod
│     ├─config
│     │ └...
│     └─instance
│       ├─frontend
│       │ └─config
│       │   └...
│       └─backend
│         └─config
│           └...
└─pom.xml
---

  Every layer in this tree is optional.
  However, creating directory (qa, uat, prod, frontent, backend) of the desired layer will give plugin a signal,
  that such layer exists.

  By default plugin creates only leafs of configuration tree which may be overridden in layers configuration:

---
[...]
<layer>
  <name>environment</name>
  <includeNode>true</includeNode>
  <includeLeaf>false</includeLeaf>
</layer>
[...]
---

  * <<includeNode>> set to true tells plugin to build configuration artifact even if there is more specific layer.

  * <<includeLeaf>> set to false tells plugin not to build configuration artifact if there are no more specific layers.

  Of course these two options may be used separately. By default <<includeNode>>=false, <<includeLeaf>>=true which makes
  plugin to build only configuration tree leafs.

  The next section describes in details how configuration is merged.

* {Merge algorithms}

  Plugin traverses project from highest (<application> in example above) to lowest (<instance> in example above) level.
  Data by default is located in <config> directory which may be altered by <configDir> property in plugin configuration.


** Tree merge algorithms

  Plugin starts it work with tree merge algorithms.

---
[...]
  <configuration>
    [...]
    <treeAlgorithms>
      [...]
      <treeAlgorithm>
        <implementation>com.griddynamics.maven.plugin.cm.algorithms.tree.ReplaceTreeMergeAlgorithm</implementation>
      </treeAlgorithm>
      [...]
    </treeAlgorithms>
    [...]
---

  One of the basic tree algorithms is <CopyTreeMergeAlgorithm>. It just copies source directory to target.
  The first action it performs is just copies top level <config> directory to target directory.
  Target directory is named according to layer system names and placed into $\{project.build.directory\}:
  $\{project.build.directory\}/$\{project.artifactId\}-<layer 2 name>-<layer 3 name>-<...>.

  Another basic tree algorithms is <RecursiveTreeMergeAlgorithm>.
  It just walks through directory hierarchy as long as it is identical in source and target directory.
  If it meets file it leaves it for file merge.
  It does not deal with differences in trees leaving it to other tree merge algorithms.

  You may find complete information about how <RecursiveTreeMergeAlgorithm> works, but here is the simple scenario just
  to draw a picture of how every merge algorithm works:

  [[1.]] Plugin traverses project structure determining which configurations actually exist

  [[2.]] Plugin goes through tree merge algorithms and takes the first one which is able to merge </> directory

        [[2.1.]] Copy tree merge algorithm occurs to be first which is able to do that since no target directory exist.
                 It has </> path at the start of traversing. It just copies <config> directory to target directory.

                 At this point first layer of configuration is merged.

        [[2.2.]] Then <RecursiveTreeMergeAlgorithm> acts.
                 It takes files from <config> directory one by one in second layer and

                 [[2.2.A.]] If file is directory it looks for corresponding directory in <target> directory

                            [[2.2.A.A.]] If directory does not exist, algorithm skips it action leaving it for next ones

                                         [[2.2.A.A.A.]] If next algorithm is <CopyTreeMergeAlgorithm> which just copies
                                                        absent directory to the designated directory in target hierarchy.

                                         [[2.2.A.A.B.]] If there is no algorithm for processing directory, it is just
                                                        skipped.

                            [[2.2.A.B.]] If directory exists, algorithm goes to <2.2.> step with new path
                                         Please note, that if there are other algorithms before recursive tree merge,
                                         they may handle this merge instead.

                 [[2.2.B.]] If file is an ordinary file it looks for first file merge algorithm which is able to process
                            given file. If one was found it will be used to operate with file.

                            For example there is CopyFileMergeAlgorithm which just copies file from source to
                            destination when no file in destination exists. Also there is OverwriteFileMergeAlgorithm
                            which is able to replace destination file with source one if there already destination file.

        [[2.3.]] Merge process goes down to next layer and does <2.1.> - <2.3> for each item in layer

  [[3.]] When everything was merged, plugin archives output directories and attaches them to Maven project with
         <layer2item-...> qualifier.

  Since plugin starts from highest level, recursive algorithm just recreates top level directory structure in
  configuration target directory.
  If it meets a file, then file merge algorithm is looked up and applied.

** File merge algorithms

---
[...]
  <configuration>
    [...]
    <fileAlgorithms>
      <fileAlgorithm>
        <implementation>com.griddynamics.maven.plugin.cm.algorithms.file.PropertiesFileMergeAlgorithm</implementation>
      </fileAlgorithm>
      [...]
---

  Provided in example file merge algorithm merges Java properties files overriding property values on higher level with
  corresponding values on lower level. So if you have, for example my_application.properties file on <application> level
  which has the following contents:

---
hostname=%{HOSTNAME_PLACEHOLDER}
port=80
error_message="Site is down, we're working to bring it up right now. Come back in few minutes"
---

  And the corresponding file on instance level has the following contents:

---
hostname=example.com
port=8080
---

  Then resulting file will contain

---
hostname=example.com
port=8080
error_message="Site is down, we're working to bring it up right now. Come back in few minutes"
---

  This example shows one of best practices: you use placeholders on high level and specific values on low level. Such
  approach may be useful, for example in the following two cases:

  [[1]] You have some mandatory properties which need to be set in environment and you want to verify you final
        configuration that you have specified them: just put these properties into <application> level with placeholders
        (you may specify %\{MANDATORY_PROPERTY_NOT_SET\} placeholder for example) and you will be able to notice them on
        lower level.

  [[2]] Along with static environments you have a pool with dynamically allocated environments. All such environments
        will get their <hostname> value from pool manager. So you have to use some deployment utilities to
        replace environment-dependent placeholders with ones which were provided by environment pool manager.

  These two are just examples. You may find all best practices {{{bestPractices}here}}.

** Data merge algorithms

  As follows from introduction there are also <data merge algorithms>.
  To go to their level of merge there is special file merge algorithm <DataFileMergeAlgorithm> which allows to perform
  merge on data level inside files.
  This algorithms introduce processors which are supposed to transform data in files into DOM structure.
  DOM structures are merged using data merge algorithm and then transformed back into files.

  The following snippet contains example of data merge algorithm configuration:

---
[...]
  <configuration>
    [...]
    <dataAlgorithms>
      <dataAlgorithm>
        <implementation>com.griddynamics.maven.plugin.cm.algorithms.data.OverrideDataMergeAlgorithm</implementation>
        <configuration>
          <includes>
            /my.cnf/*/*
          </includes>
        </configuration>
      </dataAlgorithm>
      <dataAlgorithm>
        <implementation>com.griddynamics.maven.plugin.cm.algorithms.data.RecursiveDataMergeAlgorithm</implementation>
      </dataAlgorithm>
      <dataAlgorithm>
        <implementation>com.griddynamics.maven.plugin.cm.algorithms.data.CopyDataMergeAlgorithm</implementation>
      </dataAlgorithm>
    </dataAlgorithms>
    <processors>
      <processor>
        <implementation>com.griddynamics.maven.plugin.cm.algorithms.data.processor.CnfProcessor</implementation>
      </processor>
      [...]
---

  This is the most complete example for data merge. It shows how MySQL configuration may be merged using combination
  data merge algorithms.
  The order of merge algorithms is important. For example if you place <OverrideDataMergeAlgorithm> after
  <RecursiveDataMergeAlgorithm> the plugin will always use <RecursiveDataMergeAlgorithm> because the area of appliance
  of these both algorithms is the same: they work when source and target DOM nodes exist.

  You also might notice the <includes> in plugin <configuration>. For almost all data merge algorithms, as well as for
  all other algorithms types, there is configuration.
  Configuration allows to specify items to be included or to be excluded from being processed by algorithm. Both
  <includes> and <excludes> elements may be specified. In this way <includes> works as <excludes> override.

  With data merge algorithms you need to specify XPath for items in DOM tree. There may be several XPath expressions
  separated by semicolon.
  In case of file and tree merge you have to specify regular expressions. There may be only one regular expression,
  however it is possible to use pipe separator to specify several expressions.
